// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dataSource.proto

package dbConfigInterface

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message的每一个字段，都要用如下的三个修饰符(modifier)来声明：
//        1.required：必须赋值，不能为空，否则该条message会被认为是“uninitialized”。
//		build一个 “uninitialized” message会抛出一个RuntimeException异常，
//		解析一条“uninitialized” message会抛出一条IOException异常。除此之外，“required”字段跟“optional”字段并无差别。
//        2.optional：字段可以赋值，也可以不赋值。假如没有赋值的话，会被赋上默认值。
//		对于简单类型，默认值可以自己设定，例如上例的 PhoneNumber中的PhoneType字段。如果没有自行设定，会被赋上一个系统默认值，
//		数字类型会被赋为0，String类型会被赋为空字符 串，bool类型会被赋为false。对于内置的message，默认值为该message的默认实例或者原型，
//		即其内所有字段均为设置。当获取没有显式 设置值的optional字段的值时，就会返回该字段的默认值。
//		  3.repeated：该字段可以重复任意次数，包括0次。重复数据的顺序将会保存在protocol buffer中，将这个字段想象成一个可以自动设置size的数组就可以了。
//		由于一些历史原因，数字类型的repeated字段性能有些不尽人意，但是，PB已经做了改进，但是需要再添加一点改动，即在声明后添加[packed=true]
//		例如：repeated int32 samples = 4 [packed=true];
type
DataSourceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataName             string   `protobuf:"bytes,2,opt,name=dataName,proto3" json:"dataName,omitempty"`
	JdbcUrl              string   `protobuf:"bytes,3,opt,name=jdbcUrl,proto3" json:"jdbcUrl,omitempty"`
	DriverClass          string   `protobuf:"bytes,4,opt,name=driverClass,proto3" json:"driverClass,omitempty"`
	User                 string   `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password             string   `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	Remake               string   `protobuf:"bytes,7,opt,name=remake,proto3" json:"remake,omitempty"`
	WriteOrRead          int32    `protobuf:"varint,8,opt,name=writeOrRead,proto3" json:"writeOrRead,omitempty"`
	CreateTime           int32    `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Status               int32    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataSourceRequest) Reset()         { *m = DataSourceRequest{} }
func (m *DataSourceRequest) String() string { return proto.CompactTextString(m) }
func (*DataSourceRequest) ProtoMessage()    {}
func (*DataSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5742168c1b410dee, []int{0}
}

func (m *DataSourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataSourceRequest.Unmarshal(m, b)
}
func (m *DataSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataSourceRequest.Marshal(b, m, deterministic)
}
func (m *DataSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSourceRequest.Merge(m, src)
}
func (m *DataSourceRequest) XXX_Size() int {
	return xxx_messageInfo_DataSourceRequest.Size(m)
}
func (m *DataSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataSourceRequest proto.InternalMessageInfo

func (m *DataSourceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataSourceRequest) GetDataName() string {
	if m != nil {
		return m.DataName
	}
	return ""
}

func (m *DataSourceRequest) GetJdbcUrl() string {
	if m != nil {
		return m.JdbcUrl
	}
	return ""
}

func (m *DataSourceRequest) GetDriverClass() string {
	if m != nil {
		return m.DriverClass
	}
	return ""
}

func (m *DataSourceRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DataSourceRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DataSourceRequest) GetRemake() string {
	if m != nil {
		return m.Remake
	}
	return ""
}

func (m *DataSourceRequest) GetWriteOrRead() int32 {
	if m != nil {
		return m.WriteOrRead
	}
	return 0
}

func (m *DataSourceRequest) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *DataSourceRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type DataSourceReply struct {
	SInfo                *Status              `protobuf:"bytes,1,opt,name=sInfo,proto3" json:"sInfo,omitempty"`
	DrInfo               []*DataSourceRequest `protobuf:"bytes,2,rep,name=drInfo,proto3" json:"drInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DataSourceReply) Reset()         { *m = DataSourceReply{} }
func (m *DataSourceReply) String() string { return proto.CompactTextString(m) }
func (*DataSourceReply) ProtoMessage()    {}
func (*DataSourceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5742168c1b410dee, []int{1}
}

func (m *DataSourceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataSourceReply.Unmarshal(m, b)
}
func (m *DataSourceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataSourceReply.Marshal(b, m, deterministic)
}
func (m *DataSourceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSourceReply.Merge(m, src)
}
func (m *DataSourceReply) XXX_Size() int {
	return xxx_messageInfo_DataSourceReply.Size(m)
}
func (m *DataSourceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSourceReply.DiscardUnknown(m)
}

var xxx_messageInfo_DataSourceReply proto.InternalMessageInfo

func (m *DataSourceReply) GetSInfo() *Status {
	if m != nil {
		return m.SInfo
	}
	return nil
}

func (m *DataSourceReply) GetDrInfo() []*DataSourceRequest {
	if m != nil {
		return m.DrInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*DataSourceRequest)(nil), "dbConfigInterface.DataSourceRequest")
	proto.RegisterType((*DataSourceReply)(nil), "dbConfigInterface.DataSourceReply")
}

func init() { proto.RegisterFile("dataSource.proto", fileDescriptor_5742168c1b410dee) }

var fileDescriptor_5742168c1b410dee = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xbd, 0x8e, 0xda, 0x40,
	0x10, 0x96, 0x0d, 0x18, 0x18, 0x08, 0x3f, 0x5b, 0x44, 0x1b, 0x8a, 0xc8, 0x42, 0x29, 0xa8, 0x1c,
	0x89, 0xb4, 0x69, 0x08, 0x28, 0x12, 0x4d, 0x22, 0x99, 0x50, 0x44, 0x49, 0x8a, 0xc5, 0x3b, 0xa0,
	0xcd, 0x19, 0xaf, 0x6f, 0x77, 0x0d, 0xba, 0xee, 0x5e, 0xe4, 0x9e, 0xee, 0x5e, 0xe4, 0xe4, 0x35,
	0x70, 0x96, 0x38, 0xe9, 0xae, 0x71, 0xe7, 0x6f, 0xbe, 0x9f, 0xb1, 0xbf, 0x91, 0x61, 0xc0, 0x99,
	0x61, 0x2b, 0x99, 0xa9, 0x08, 0x83, 0x54, 0x49, 0x23, 0xc9, 0x90, 0x6f, 0xe6, 0x32, 0xd9, 0x8a,
	0xdd, 0x32, 0x31, 0xa8, 0xb6, 0x2c, 0xc2, 0x51, 0x57, 0x1b, 0x66, 0x32, 0x5d, 0x08, 0xc6, 0x0f,
	0x2e, 0x0c, 0x17, 0x17, 0x57, 0x88, 0xb7, 0x19, 0x6a, 0x43, 0x7a, 0xe0, 0x0a, 0x4e, 0x1d, 0xdf,
	0x99, 0xb4, 0x43, 0x57, 0x70, 0x32, 0x82, 0x56, 0x1e, 0xfd, 0x83, 0xed, 0x91, 0xba, 0x76, 0x7a,
	0xc1, 0x84, 0x42, 0xf3, 0x3f, 0xdf, 0x44, 0x6b, 0x15, 0xd3, 0x9a, 0xa5, 0xce, 0x90, 0xf8, 0xd0,
	0xe1, 0x4a, 0x1c, 0x50, 0xcd, 0x63, 0xa6, 0x35, 0xad, 0x5b, 0xb6, 0x3c, 0x22, 0x04, 0xea, 0x99,
	0x46, 0x45, 0x1b, 0x96, 0xb2, 0xcf, 0xf9, 0xae, 0x94, 0x69, 0x7d, 0x94, 0x8a, 0x53, 0xaf, 0xd8,
	0x75, 0xc6, 0xe4, 0x3d, 0x78, 0x0a, 0xf7, 0xec, 0x06, 0x69, 0xd3, 0x32, 0x27, 0x94, 0x6f, 0x3a,
	0x2a, 0x61, 0xf0, 0xa7, 0x0a, 0x91, 0x71, 0xda, 0xf2, 0x9d, 0x49, 0x23, 0x2c, 0x8f, 0xc8, 0x47,
	0x80, 0x48, 0x21, 0x33, 0xf8, 0x4b, 0xec, 0x91, 0xb6, 0xad, 0xa0, 0x34, 0xc9, 0x93, 0x8b, 0x5e,
	0x28, 0x58, 0xee, 0x84, 0xc6, 0xf7, 0x0e, 0xf4, 0xcb, 0xfd, 0xa4, 0xf1, 0x1d, 0xf9, 0x0c, 0x0d,
	0xbd, 0x4c, 0xb6, 0xd2, 0x16, 0xd4, 0x99, 0x7e, 0x08, 0xae, 0x4a, 0x0e, 0x56, 0xd6, 0x1d, 0x16,
	0x3a, 0xf2, 0x15, 0x3c, 0xae, 0xac, 0xc3, 0xf5, 0x6b, 0x93, 0xce, 0xf4, 0xd3, 0x0b, 0x8e, 0xab,
	0x23, 0x84, 0x27, 0xcf, 0xf4, 0xb1, 0x56, 0x3e, 0xd1, 0x0a, 0xd5, 0x41, 0x44, 0x48, 0xfe, 0xc1,
	0xf0, 0xbb, 0x48, 0xf8, 0x2c, 0x8e, 0x9f, 0x39, 0xf2, 0xa6, 0xe0, 0xd1, 0xf8, 0x15, 0x55, 0xfe,
	0x8d, 0xbf, 0xe1, 0xdd, 0x8c, 0xf3, 0x4a, 0xa2, 0xff, 0xc2, 0x60, 0x9d, 0x72, 0x66, 0xb0, 0xaa,
	0x17, 0x5f, 0x60, 0x35, 0x9d, 0xfc, 0x81, 0xfe, 0x5c, 0x66, 0x89, 0xa9, 0x22, 0xfc, 0x5b, 0x0f,
	0xba, 0x42, 0x06, 0x3b, 0x95, 0x46, 0xc1, 0x91, 0xc5, 0xb8, 0xf1, 0xec, 0xff, 0xf9, 0xe5, 0x29,
	0x00, 0x00, 0xff, 0xff, 0xed, 0x87, 0x55, 0xc7, 0xd4, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataSourceServiceClient is the client API for DataSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataSourceServiceClient interface {
	FindAllDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error)
	AddDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error)
	UpdateDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error)
	DelDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error)
	CountDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error)
}

type dataSourceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataSourceServiceClient(cc *grpc.ClientConn) DataSourceServiceClient {
	return &dataSourceServiceClient{cc}
}

func (c *dataSourceServiceClient) FindAllDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error) {
	out := new(DataSourceReply)
	err := c.cc.Invoke(ctx, "/dbConfigInterface.DataSourceService/FindAllDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) AddDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error) {
	out := new(DataSourceReply)
	err := c.cc.Invoke(ctx, "/dbConfigInterface.DataSourceService/AddDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) UpdateDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error) {
	out := new(DataSourceReply)
	err := c.cc.Invoke(ctx, "/dbConfigInterface.DataSourceService/UpdateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) DelDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error) {
	out := new(DataSourceReply)
	err := c.cc.Invoke(ctx, "/dbConfigInterface.DataSourceService/DelDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) CountDataSource(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceReply, error) {
	out := new(DataSourceReply)
	err := c.cc.Invoke(ctx, "/dbConfigInterface.DataSourceService/CountDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceServiceServer is the server API for DataSourceService service.
type DataSourceServiceServer interface {
	FindAllDataSource(context.Context, *DataSourceRequest) (*DataSourceReply, error)
	AddDataSource(context.Context, *DataSourceRequest) (*DataSourceReply, error)
	UpdateDataSource(context.Context, *DataSourceRequest) (*DataSourceReply, error)
	DelDataSource(context.Context, *DataSourceRequest) (*DataSourceReply, error)
	CountDataSource(context.Context, *DataSourceRequest) (*DataSourceReply, error)
}

func RegisterDataSourceServiceServer(s *grpc.Server, srv DataSourceServiceServer) {
	s.RegisterService(&_DataSourceService_serviceDesc, srv)
}

func _DataSourceService_FindAllDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).FindAllDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbConfigInterface.DataSourceService/FindAllDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).FindAllDataSource(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_AddDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).AddDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbConfigInterface.DataSourceService/AddDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).AddDataSource(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_UpdateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).UpdateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbConfigInterface.DataSourceService/UpdateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).UpdateDataSource(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_DelDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).DelDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbConfigInterface.DataSourceService/DelDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).DelDataSource(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_CountDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).CountDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbConfigInterface.DataSourceService/CountDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).CountDataSource(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataSourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbConfigInterface.DataSourceService",
	HandlerType: (*DataSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllDataSource",
			Handler:    _DataSourceService_FindAllDataSource_Handler,
		},
		{
			MethodName: "AddDataSource",
			Handler:    _DataSourceService_AddDataSource_Handler,
		},
		{
			MethodName: "UpdateDataSource",
			Handler:    _DataSourceService_UpdateDataSource_Handler,
		},
		{
			MethodName: "DelDataSource",
			Handler:    _DataSourceService_DelDataSource_Handler,
		},
		{
			MethodName: "CountDataSource",
			Handler:    _DataSourceService_CountDataSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataSource.proto",
}
